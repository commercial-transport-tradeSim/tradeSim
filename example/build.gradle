/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'tradeSim.java-application-conventions'
    id 'maven-publish'
}

dependencies {
    implementation project(':core')
}

def createShortTermModuleTask(configurationFile) {
	def taskName = configurationFile.getName().replace('.yaml','')
    def composedTaskName = "config_${taskName}_Simulation"
    return tasks.create(composedTaskName, JavaExec) {
        args = [configurationFile.getAbsolutePath()]
    	main = "tradesim.simulation.Runner"
    }
}


def createRunFiles(t) {
    def name = t.name
    println("create file for: ${name}")
    new File("${rootDir}/run/run-${name}.bat").text = 
"""
cd ..
call gradlew.bat clean --refresh-dependencies dependencies build $name
pause
"""

	new File("${rootDir}/run/run-${name}.sh").text = 
"""
#!/bin/bash
cd ..
./gradlew clean --refresh-dependencies dependencies build $name
read
"""
}

	
new File("${rootDir}/example").eachFileRecurse(groovy.io.FileType.FILES) {
    if(it.name.endsWith('.yaml')) {
        def t = createShortTermModuleTask(it)
        createRunFiles(t)
    }
}


tasks.withType(JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    dependsOn check
    enableAssertions = "true"
    group = "application"
    maxHeapSize = "25G"
    jvmArgs '-Xss512M'
    jvmArgs '-XX:+UseG1GC'
    //jvmArgs '-Xrunhprof:cpu=samples,depth=10'
    jvmArgs '-Djava.util.concurrent.ForkJoinPool.common.parallelism=4'
}


publishing {
    publications {
        maven(MavenPublication) {
			groupId = 'tradeSim'
			artifactId = 'example'
			version = '0.1.0'
			
			from components.java
			
			pom {
				licenses {
					license {
						name = 'GNU GENERAL PUBLIC LICENSE, Version 3'
						url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
						distribution = 'repo'
					}
				}
			}
		}

	}
	
}

tasks.withType(GenerateMavenPom).all {
    def matcher = name =~ /generatePomFileFor(\w+)Publication/
    def publicationName = matcher[0][1]
    destination = layout.buildDirectory.file("poms/pom.xml").get().asFile
}
